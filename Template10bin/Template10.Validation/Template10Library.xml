<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Template10Library</name>
    </assembly>
    <members>
        <member name="T:Template10.Behaviors.BackButtonBehavior">
            <summary>
            Use this behavior to add actions when the user clicks the back button
            Usually the shell back button. And, you are not necessarily wanting to 
            navigate, but do something like close a dialog box.
            </summary>
        </member>
        <member name="T:Template10.Behaviors.EventTriggerBehaviorBase">
            <summary>
            A behavior that listens for a specified event on its source and executes its actions when that event is fired.
            </summary>
        </member>
        <member name="F:Template10.Behaviors.EventTriggerBehaviorBase.ActionsProperty">
            <summary>
            Identifies the <seealso cref="P:Template10.Behaviors.EventTriggerBehaviorBase.Actions"/> dependency property.
            </summary>
        </member>
        <member name="F:Template10.Behaviors.EventTriggerBehaviorBase.EventNameProperty">
            <summary>
            Identifies the <seealso cref="P:Template10.Behaviors.EventTriggerBehaviorBase.EventName"/> dependency property.
            </summary>
        </member>
        <member name="F:Template10.Behaviors.EventTriggerBehaviorBase.SourceObjectProperty">
            <summary>
            Identifies the <seealso cref="P:Template10.Behaviors.EventTriggerBehaviorBase.SourceObject"/> dependency property.
            </summary>
        </member>
        <member name="P:Template10.Behaviors.EventTriggerBehaviorBase.ResolvedSource">
            <summary>
            Resolved source.
            </summary>
        </member>
        <member name="M:Template10.Behaviors.EventTriggerBehaviorBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Template10.Behaviors.EventTriggerBehaviorBase"/> class.
            </summary>
        </member>
        <member name="P:Template10.Behaviors.EventTriggerBehaviorBase.Actions">
            <summary>
            Gets the collection of actions associated with the behavior. This is a dependency property.
            </summary>
        </member>
        <member name="P:Template10.Behaviors.EventTriggerBehaviorBase.EventName">
            <summary>
            Gets or sets the name of the event to listen for. This is a dependency property.
            </summary>
        </member>
        <member name="P:Template10.Behaviors.EventTriggerBehaviorBase.SourceObject">
            <summary>
            Gets or sets the source object from which this behavior listens for events.
            If <seealso cref="P:Template10.Behaviors.EventTriggerBehaviorBase.SourceObject"/> is not set, the source will default to <seealso cref="P:Microsoft.Xaml.Interactivity.Behavior.AssociatedObject"/>. This is a dependency property.
            </summary>
        </member>
        <member name="M:Template10.Behaviors.EventTriggerBehaviorBase.OnAttached">
            <summary>
            Called after the behavior is attached to the <see cref="P:Microsoft.Xaml.Interactivity.Behavior.AssociatedObject"/>.
            </summary>
        </member>
        <member name="M:Template10.Behaviors.EventTriggerBehaviorBase.OnDetaching">
            <summary>
            Called when the behavior is being detached from its <see cref="P:Microsoft.Xaml.Interactivity.Behavior.AssociatedObject"/>.
            </summary>
        </member>
        <member name="M:Template10.Behaviors.EventTriggerBehaviorBase.OnEvent(System.Object,System.Object)">
            <summary>
            Actions to be done on event triggering. In default implementation list of actions is executed immediately.
            This is a main class extension point if some additional actions should be done on event trigger.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="eventArgs">Event argument.</param>
        </member>
        <member name="T:Template10.Behaviors.ThrottledEventTriggerBehavior">
            <summary>
            The Throttled Event Behavior attaches to a target's event, and executes child actions at a rate no faster than the throttle set (in milliseconds). 
            </summary>
        </member>
        <member name="P:Template10.Behaviors.ThrottledEventTriggerBehavior.Throttle">
            <summary>
            Throttle period (in milliseconds).
            </summary>
        </member>
        <member name="F:Template10.Behaviors.ThrottledEventTriggerBehavior.ThrottleProperty">
            <summary>
            Throttle period (in milliseconds)
            </summary>
        </member>
        <member name="P:Template10.Behaviors.ThrottledEventTriggerBehavior.ResetTimer">
            <summary>
            Reset throttle timer after each event.
            </summary>
        </member>
        <member name="F:Template10.Behaviors.ThrottledEventTriggerBehavior.ResetTimerProperty">
            <summary>
            Reset throttle timer after each event.
            </summary>
        </member>
        <member name="M:Template10.Behaviors.ThrottledEventTriggerBehavior.OnEvent(System.Object,System.Object)">
            <summary>
            Actions to be done on event triggering. In default implementation list of actions is executed immediately.
            This is a main class extension point if some additional actions should be done on event trigger.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="eventArgs">Event argument.</param>
        </member>
        <member name="T:Template10.Common.EventThrottleHelper">
            <summary>
            Helper class for throttling events.
            </summary>
        </member>
        <member name="E:Template10.Common.EventThrottleHelper.ThrottledEvent">
            <summary>
            Throttled event.
            </summary>
        </member>
        <member name="P:Template10.Common.EventThrottleHelper.Throttle">
            <summary>
            Throttle time in milliseconds.
            </summary>
        </member>
        <member name="P:Template10.Common.EventThrottleHelper.ResetTimer">
            <summary>
            Reset throttle timer after each event.
            </summary>
        </member>
        <member name="F:Template10.Common.EventThrottleHelper.ResetTimerProperty">
            <summary>
            Reset throttle timer after each event.
            </summary>
        </member>
        <member name="F:Template10.Common.EventThrottleHelper.ThrottleProperty">
            <summary>
            Throttle time in milliseconds.
            </summary>
        </member>
        <member name="M:Template10.Common.EventThrottleHelper.TriggerEvent(System.Object)">
            <summary>
            Trigger a throttled event. Can only be called from the UI thread.
            </summary>
            <param name="eventData">Event data (only last event data will be transfered to event handler).</param>
        </member>
        <member name="M:Template10.Common.EventThrottleHelper.DispatchTriggerEvent(System.Object)">
            <summary>
            Trigger a throttled event inside a dispatcher.
            </summary>
            <param name="eventData">Event data (only last event data will be transfered to event handler).</param>
        </member>
        <member name="M:Template10.Common.BootStrapper.ResolveForPage(Windows.UI.Xaml.Controls.Page,Template10.Services.NavigationService.NavigationService)">
            <summary>
            If a developer overrides this method, the developer can resolve DataContext or unwrap DataContext 
            available for the Page object when using a MVVM pattern that relies on a wrapped/porxy around ViewModels
            </summary>
        </member>
        <member name="P:Template10.Common.BootStrapper.SplashFactory">
            <summary>
            The SplashFactory is a Func that returns an instantiated Splash view.
            Template 10 will automatically inject this visual before loading the app.
            </summary>
        </member>
        <member name="P:Template10.Common.BootStrapper.CacheMaxDuration">
            <summary>
            CacheMaxDuration indicates the maximum TimeSpan for which cache data
            will be preserved. If Template 10 determines cache data is older than
            the specified MaxDuration it will automatically be cleared during start.
            </summary>
        </member>
        <member name="P:Template10.Common.BootStrapper.ShowShellBackButton">
            <summary>
            ShowShellBackButton is used to show or hide the shell-drawn back button that
            is new to Windows 10. A developer can do this manually, but using this property
            is important during navigation because Template 10 manages the visibility
            of the shell-drawn back button at that time.
            </summary>
        </member>
        <member name="M:Template10.Common.BootStrapper.InternalActivatedAsync(Windows.ApplicationModel.Activation.IActivatedEventArgs)">
            <summary>
            This handles all the prelimimary stuff unique to Activated before calling OnStartAsync()
            This is private because it is a specialized prelude to OnStartAsync().
            OnStartAsync will not be called if state restore is determined.
            </summary>
        </member>
        <member name="M:Template10.Common.BootStrapper.InternalLaunchAsync(Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs)">
            <summary>
            This handles all the preliminary stuff unique to Launched before calling OnStartAsync().
            This is private because it is a specialized prelude to OnStartAsync().
            OnStartAsync will not be called if state restore is determined
            </summary>
        </member>
        <member name="M:Template10.Common.BootStrapper.RaiseBackRequested(System.Boolean@)">
            <summary>
            Default Hardware/Shell Back handler overrides standard Back behavior 
            that navigates to previous app in the app stack to instead cause a backward page navigation.
            Views or Viewodels can override this behavior by handling the BackRequested 
            event and setting the Handled property of the BackRequestedEventArgs to true.
            </summary>
        </member>
        <member name="M:Template10.Common.BootStrapper.OnPrelaunchAsync(Windows.ApplicationModel.Activation.IActivatedEventArgs,System.Boolean@)">
            <summary>
            Prelaunch may never occur. However, it's possible that it will. It is a Windows mechanism
            to launch apps in the background and quickly suspend them. Because of this, developers need to
            handle Prelaunch scenarios if their typical launch is expensive or requires user interaction.
            </summary>
            <param name="args">IActivatedEventArgs from startup</param>
            <param name="runOnStartAsync">A developer can force the typical startup pipeline. Default should be false.</param>
            <remarks>
            For Prelaunch Template 10 does not continue the typical startup pipeline by default. 
            OnActivated will occur if the application has been prelaunched.
            </remarks>
        </member>
        <member name="F:Template10.Common.BootStrapper._HasOnPrelaunchAsync">
            <summary>
            This indicates if OnPreLaunch has EVER been called.
            </summary>
        </member>
        <member name="M:Template10.Common.BootStrapper.OnStartAsync(Template10.Common.BootStrapper.StartKind,Windows.ApplicationModel.Activation.IActivatedEventArgs)">
            <summary>
            OnStartAsync is the one-stop-show override to handle when your app starts
            Template 10 will not call OnStartAsync if the app is restored from state.
            An app restores from state when the app was suspended and then terminated (PreviousExecutionState terminated).
            </summary>
        </member>
        <member name="F:Template10.Common.BootStrapper._HasOnStartAsync">
            <summary>
            This indicates if OnStartAsync has EVER been called
            </summary>
        </member>
        <member name="M:Template10.Common.BootStrapper.OnInitializeAsync(Windows.ApplicationModel.Activation.IActivatedEventArgs)">
            <summary>
            OnInitializeAsync is where your app will do must-have up-front operations
            OnInitializeAsync will be called even if the application is restoring from state.
            An app restores from state when the app was suspended and then terminated (PreviousExecutionState terminated).
            </summary>
        </member>
        <member name="F:Template10.Common.BootStrapper._HasOnInitializeAsync">
            <summary>
            This indicates if OnInitAsync has EVER been called
            </summary>
        </member>
        <member name="M:Template10.Common.BootStrapper.OnSuspendingAsync(System.Object,Windows.ApplicationModel.SuspendingEventArgs,System.Boolean)">
            <summary>
            OnSuspendingAsync will be called when the application is suspending, but this override
            should only be used by applications that have application-level operations that must
            be completed during suspension. 
            Using OnSuspendingAsync is a little better than handling the Suspending event manually
            because the asunc operations are in a single, global deferral created when the suspension
            begins and completed automatically when the last viewmodel has been called (including this method).
            </summary>
        </member>
        <member name="M:Template10.Common.BootStrapper.OnResuming(System.Object,System.Object,Template10.Common.BootStrapper.AppExecutionState)">
            <summary>
            The application is returning from a suspend state of some kind.
            </summary>
            <param name="s"></param>
            <param name="e"></param>
            <param name="previousExecutionState"></param>
            <remarks>
            previousExecutionState can be Terminated, which typically does not raise OnResume.
            This is important because the resume model changes a little in Mobile.
            </remarks>
        </member>
        <member name="M:Template10.Common.BootStrapper.NavigationServiceFactory(Template10.Common.BootStrapper.BackButton,Template10.Common.BootStrapper.ExistingContent)">
            <summary>
            Creates a new Frame and adds the resulting NavigationService to the 
            WindowWrapper collection. In addition, it optionally will setup the 
            shell back button to react to the nav of the Frame.
            A developer should call this when creating a new/secondary frame.
            The shell back button should only be setup one time.
            </summary>
        </member>
        <member name="M:Template10.Common.BootStrapper.CreateNavigationService(Windows.UI.Xaml.Controls.Frame)">
            <summary>
            Creates the NavigationService instance for given Frame.
            </summary>
        </member>
        <member name="M:Template10.Common.BootStrapper.NavigationServiceFactory(Template10.Common.BootStrapper.BackButton,Template10.Common.BootStrapper.ExistingContent,Windows.UI.Xaml.Controls.Frame)">
            <summary>
            Creates a new NavigationService from the gived Frame to the 
            WindowWrapper collection. In addition, it optionally will setup the 
            shell back button to react to the nav of the Frame.
            A developer should call this when creating a new/secondary frame.
            The shell back button should only be setup one time.
            </summary>
        </member>
        <member name="M:Template10.Common.BootStrapper.ActivateWindow(Template10.Common.BootStrapper.ActivateWindowSources)">
            <summary>
            Override this method only if you (the developer) wants to programmatically
            control the means by which and when the Core Window is activated by Template 10.
            One scenario might be a delayed activation for Splash Screen.
            </summary>
            <param name="source">Reason for the call from Template 10</param>
        </member>
        <member name="M:Template10.Common.BootStrapper.CreateRootElement(Windows.ApplicationModel.Activation.IActivatedEventArgs)">
            <summary>
             By default, Template 10 will setup the root element to be a Template 10
             Modal Dialog control. If you desire something different, you can set it here.
            </summary>
        </member>
        <member name="M:Template10.Common.BootStrapper.DetermineStartCause(Windows.ApplicationModel.Activation.IActivatedEventArgs)">
            <summary>
            This determines the simplest case for starting. This should handle 80% of common scenarios. 
            When Other is returned the developer must determine start manually using IActivatedEventArgs.Kind
            </summary>
        </member>
        <member name="T:Template10.Common.NavButtonsHelper">
            <summary>
            Helper class for navigation buttons visibility logic.
            </summary>
            <remarks>Moved logic here from NavButtonBehavior because public static methods should be in a static class.</remarks>
        </member>
        <member name="M:Template10.Common.NavButtonsHelper.CalculateForwardVisibility(Windows.UI.Xaml.Controls.Frame)">
            <summary>
            Calculate forward navigation button visibility for a frame.
            </summary>
            <param name="frame">Frame.</param>
            <returns>Button visibility.</returns>
        </member>
        <member name="M:Template10.Common.NavButtonsHelper.CalculateBackVisibility(Windows.UI.Xaml.Controls.Frame)">
            <summary>
            Calculate forward navigation button visibility for a frame.
            </summary>
            <param name="frame">Frame.</param>
            <returns>Button visibility.</returns>
        </member>
        <member name="P:Template10.Controls.HamburgerMenu.HamburgerButtonVisibility">
            <summary>
            Gets or sets the visibility of the Hamburger button. This is generally automatically set by the visual states,
            but can manually be set to accomodate custom layouts.
            </summary>
        </member>
        <member name="P:Template10.Controls.HamburgerMenu.DisplayMode">
            <summary>
            DisplayMode is a projection of the DisplayMode property in the underlying SplitView. Setting this property
            will set the property in the underlying SplitView. This is generally automatically set by the visual states,
            but can manually be set to accomodate custom layouts.
            </summary>
        </member>
        <member name="P:Template10.Controls.HamburgerMenu.VisualStateNarrowMinWidth">
            <summary>
            This is one of three visual state properties. It sets the minimum value used to invoke the Wide visual state.
            </summary>
            <remarks>
            In the Template 10 world, there are typically three visual states: 1) Minimal, 2) Normal, and 3) Wide
            </remarks>
        </member>
        <member name="P:Template10.Controls.HamburgerMenu.VisualStateNormalMinWidth">
            <summary>
            This is one of three visual state properties. It sets the minimum value used to invoke the Normal visual state.
            </summary>
            <remarks>
            In the Template 10 world, there are typically three visual states: 1) Minimal, 2) Normal, and 3) Wide
            </remarks>
        </member>
        <member name="P:Template10.Controls.HamburgerMenu.VisualStateWideMinWidth">
            <summary>
            This is one of three visual state properties. It sets the minimum value used to invoke the Minimum visual state.
            </summary>
            <remarks>
            In the Template 10 world, there are typically three visual states: 1) Minimal, 2) Normal, and 3) Wide
            </remarks>
        </member>
        <member name="P:Template10.Controls.HamburgerMenu.SecondaryButtonOrientation">
            <summary>
            This sets or gets if the bottom buttons in the Hamburger Menu are arranged vertically or horizontally.
            The value of this property will only be effective when the IsOpen property is true and the DisplayMode is
            not in Compact mode. In the inverse of that combination, buttons will be Vertical because nothing else makes sense.
            </summary>
        </member>
        <member name="P:Template10.Controls.HamburgerMenu.AccentColor">
            <summary>
            There are several color properties in the Hamburger Menu control, however, the AccentColor property
            is intended to make setting all those properties easier. Setting AccentColor will set the value of
            all the style-related properties in the menu. However, one consequence is that it will overwrite
            any existing values. If you desire to set properties individually, do not set AccentColor.
            </summary>
        </member>
        <member name="P:Template10.Controls.HamburgerMenu.Selected">
            <summary>
            Selected indicates the current button highlighted in the navigation Pane. Setting this
            value will highlight the corresponding button as well as invoke navigation.
            </summary>
        </member>
        <member name="P:Template10.Controls.HamburgerMenu.NavigationService">
            <summary>
            The Navigation Service is used to synchronize the hamburger buttons in the navigation Pane
            with the location in the Frame. In addition, it is used to invoke navigation when the user
            clicks on a hamburger info button in the navigation Pane.
            </summary>
            <remarks>
            It is impossible for the Templat 10 Hamburger Button to function without a Navigation Service.
            As a result, it should be set as early in the pipeline as possible.
            </remarks>
        </member>
        <member name="P:Template10.Controls.HamburgerMenu.IsFullScreen">
            <summary>
            This toggles if the navigation Pane is visible or hidden. This includes the Hamburger button, too.
            A common use case for this property is to show media elements full screen. It is used internally
            to show the splash screen full screen during load.
            </summary>
        </member>
        <member name="P:Template10.Controls.HamburgerMenu.PaneWidth">
            <summary>
            PaneWidth indicates the width of the Pane when it is open. The width of the Pane
            when it is closed is hard-coded to 48 pixels. 
            </summary>
            <remarks>
            The reason the closed width of the pane is hard-coded to 48 pixels is because this
            matches the closed width of the MSN News app, after which we modeled this control.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Template10.Controls.HamburgerMenu.HamburgerButtonGridWidth" -->
        <member name="P:Template10.Controls.HamburgerMenu.OpenCloseMode">
            <summary>
            The Hamburger Menu can can respond to several gestures to toggle the IsOpen property
            and show the navigation Pane. The default is Auto, which basically means Both (or All).
            </summary>
            <remarks>
            Specifically, Tap means you can tap the empty area of the Hamburger Menu to open or
            close the navigation Pane. Swip means a left->right gesture will reveal it and a
            right->left gesture will hide it. 
            </remarks>
        </member>
        <member name="P:Template10.Controls.HamburgerMenu.PaneBorderThickness">
            <summary>
            The Panel border thickness is intended to be the border between between the open
            pane and the page content. This is particularly valuable if your menu background
            and page background colors are similar in color. You can always set this to 0.
            </summary>
        </member>
        <member name="P:Template10.Controls.HamburgerMenu.HeaderContent">
            <summary>
            TODO: deprecate this
            </summary>
        </member>
        <member name="P:Template10.Controls.HamburgerMenu.IsOpen">
            <summary>
            The Hamburger Menu is made up of two parts, the navigation Pane that holds the hamburger buttons
            and the content area that holds the frame and subsequent pages. This property determines if the 
            navitation Pane is visible or not visible. The effect varies depending on HamburgerMenu.DisplayMode.
            </summary>
        </member>
        <member name="P:Template10.Controls.HamburgerMenu.PrimaryButtons">
            <summary>
            SecondaryButtons are the button at the top of the HamburgerMenu
            </summary>
        </member>
        <member name="P:Template10.Controls.HamburgerMenu.SecondaryButtons">
            <summary>
            SecondaryButtons are the button at the bottom of the HamburgerMenu
            </summary>
        </member>
        <member name="M:Template10.Controls.HamburgerMenu.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Template10.Controls.HamburgerMenu.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="P:Template10.Controls.HamburgerButtonInfo.Command">
            <summary>  
            Sets and gets the Command property.  
            </summary>  
        </member>
        <member name="P:Template10.Controls.HamburgerButtonInfo.CommandParameter">
            <summary>  
            Sets and gets the CommandParameter property.  
            </summary>  
        </member>
        <member name="P:Template10.Controls.HamburgerButtonInfo.PageType">
            <summary>
            Sets and gets the PageType property.
            </summary>
        </member>
        <member name="P:Template10.Controls.HamburgerButtonInfo.PageParameter">
            <summary>
            Sets and gets the PageParameter property.
            </summary>
        </member>
        <member name="P:Template10.Controls.HamburgerButtonInfo.ClearHistory">
            <summary>
            Sets and gets the ClearHistory property.
            If true, navigation stack is cleared when navigating to this page
            </summary>
        </member>
        <member name="P:Template10.Controls.HamburgerButtonInfo.ClearCache">
            <summary>
            Sets and gets the ClearCache property.
            If true, navigation page cache is cleared when navigating to this page
            </summary>
        </member>
        <member name="P:Template10.Controls.HamburgerButtonInfo.Visibility">
            <summary>
            Sets and gets the Visibility property.
            Changes to that property's value raise the PropertyChanged event. 
            </summary>
        </member>
        <member name="P:Template10.Controls.HamburgerButtonInfo.IsEnabled">
            <summary>
            Sets and gets the IsEnabled property.
            Changes to that property's value raise the PropertyChanged event. 
            </summary>
        </member>
        <member name="F:Template10.Controls.RingSegment.StartAngleProperty">
            <summary>
            The start angle property.
            </summary>
        </member>
        <member name="P:Template10.Controls.RingSegment.StartAngle">
            <summary>
            Gets or sets the start angle.
            </summary>
            <value>
            The start angle.
            </value>
        </member>
        <member name="F:Template10.Controls.RingSegment.EndAngleProperty">
            <summary>
            The end angle property.
            </summary>
        </member>
        <member name="P:Template10.Controls.RingSegment.EndAngle">
            <summary>
            Gets or sets the end angle.
            </summary>
            <value>
            The end angle.
            </value>
        </member>
        <member name="F:Template10.Controls.RingSegment.RadiusProperty">
            <summary>
            The radius property
            </summary>
        </member>
        <member name="P:Template10.Controls.RingSegment.Radius">
            <summary>
            Gets or sets the outer radius.
            </summary>
            <value>
            The outer radius.
            </value>
        </member>
        <member name="F:Template10.Controls.RingSegment.InnerRadiusProperty">
            <summary>
            The inner radius property
            </summary>
        </member>
        <member name="P:Template10.Controls.RingSegment.InnerRadius">
            <summary>
            Gets or sets the inner radius.
            </summary>
            <value>
            The inner radius.
            </value>
        </member>
        <member name="F:Template10.Controls.RingSegment.CenterProperty">
            <summary>
            Center Dependency Property
            </summary>
        </member>
        <member name="P:Template10.Controls.RingSegment.Center">
            <summary>
            Gets or sets the Center property. This dependency property 
            indicates the center point.
            Center point is calculated based on Radius and StrokeThickness if not specified.    
            </summary>
        </member>
        <member name="M:Template10.Controls.RingSegment.OnCenterChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the Center property.
            </summary>
            <param name="d">
            The <see cref="T:Windows.UI.Xaml.DependencyObject"/> on which
            the property has changed value.
            </param>
            <param name="e">
            Event data that is issued by any event that
            tracks changes to the effective value of this property.
            </param>
        </member>
        <member name="M:Template10.Controls.RingSegment.OnCenterChanged(System.Nullable{Windows.Foundation.Point},System.Nullable{Windows.Foundation.Point})">
            <summary>
            Provides derived classes an opportunity to handle changes
            to the Center property.
            </summary>
            <param name="oldCenter">The old Center value</param>
            <param name="newCenter">The new Center value</param>
        </member>
        <member name="M:Template10.Controls.RingSegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Template10.Controls.RingSegment" /> class.
            </summary>
        </member>
        <member name="M:Template10.Controls.RingSegment.BeginUpdate">
            <summary>
            Suspends path updates until EndUpdate is called;
            </summary>
        </member>
        <member name="M:Template10.Controls.RingSegment.EndUpdate">
            <summary>
            Resumes immediate path updates every time a component property value changes. Updates the path.
            </summary>
        </member>
        <member name="T:Template10.Mvvm.ChangedCommandAdapter">
            <summary>
            Use this to adapt any <see cref="T:System.Windows.Input.ICommand"/> to <see cref="T:Template10.Mvvm.IChangedCommand"/> with posibility to manually initiate 
            <see cref="E:Template10.Mvvm.ChangedCommandAdapter.CanExecuteChanged"/>
            </summary>
        </member>
        <member name="T:Template10.Mvvm.IChangedCommand">
            <summary>
            Extension of <see cref="T:System.Windows.Input.ICommand"/> to allow manually call of <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/>
            </summary>
        </member>
        <member name="M:Template10.Services.FileService.FileHelper.FileExistsAsync(System.String,Template10.Services.FileService.StorageStrategies)">
            <summary>Returns if a file is found in the specified storage strategy</summary>
            <param name="key">Path of the file in storage</param>
            <param name="location">Location storage strategy</param>
            <returns>Boolean: true if found, false if not found</returns>
        </member>
        <member name="M:Template10.Services.FileService.FileHelper.DeleteFileAsync(System.String,Template10.Services.FileService.StorageStrategies)">
            <summary>Deletes a file in the specified storage strategy</summary>
            <param name="key">Path of the file in storage</param>
            <param name="location">Location storage strategy</param>
        </member>
        <member name="M:Template10.Services.FileService.FileHelper.ReadFileAsync``1(System.String,Template10.Services.FileService.StorageStrategies)">
            <summary>Reads and deserializes a file into specified type T</summary>
            <typeparam name="T">Specified type into which to deserialize file content</typeparam>
            <param name="key">Path to the file in storage</param>
            <param name="location">Location storage strategy</param>
            <returns>Specified type T</returns>
        </member>
        <member name="M:Template10.Services.FileService.FileHelper.WriteFileAsync``1(System.String,``0,Template10.Services.FileService.StorageStrategies,Windows.Storage.CreationCollisionOption)">
            <summary>Serializes an object and write to file in specified storage strategy</summary>
            <typeparam name="T">Specified type of object to serialize</typeparam>
            <param name="key">Path to the file in storage</param>
            <param name="value">Instance of object to be serialized and written</param>
            <param name="location">Location storage strategy</param>
        </member>
        <member name="M:Template10.Services.FileService.FileHelper.GetIfFileExistsAsync(System.String,Template10.Services.FileService.StorageStrategies)">
            <summary>Returns a file if it is found in the specified storage strategy</summary>
            <param name="key">Path of the file in storage</param>
            <param name="location">Location storage strategy</param>
            <returns>StorageFile</returns>
        </member>
        <member name="P:Template10.Services.NavigationService.INavigationService.IsInMainView">
            <summary>
            Specifies if this instance of INavigationService associated with <see cref="P:Windows.ApplicationModel.Core.CoreApplication.MainView"/> or any other secondary view.
            </summary>
            <returns><value>true</value> if associated with MainView, <value>false</value> otherwise</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Template10.Services.NavigationService.NavigationService.NavigateAsync``1(``0,System.Object,Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo)" -->
        <member name="M:Template10.Services.SerializationService.ISerializationService.Serialize(System.Object)">
            <summary>
            Serializes the parameter.
            </summary>
        </member>
        <member name="M:Template10.Services.SerializationService.ISerializationService.Deserialize(System.String)">
            <summary>
            Deserializes the parameter.
            </summary>
        </member>
        <member name="M:Template10.Services.SerializationService.ISerializationService.Deserialize``1(System.String)">
            <summary>
            Deserializes the parameter.
            </summary>
        </member>
        <member name="M:Template10.Services.SerializationService.JsonSerializationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Template10.Services.SerializationService.JsonSerializationService"/> class.
            </summary>
        </member>
        <member name="P:Template10.Services.SerializationService.JsonSerializationService.Settings">
            <summary>
            JSON serializer settings.
            </summary>
        </member>
        <member name="M:Template10.Services.SerializationService.JsonSerializationService.Serialize(System.Object)">
            <summary>
            Serializes the value.
            </summary>
        </member>
        <member name="M:Template10.Services.SerializationService.JsonSerializationService.Deserialize(System.String)">
            <summary>
            Deserializes the value.
            </summary>
        </member>
        <member name="M:Template10.Services.SerializationService.JsonSerializationService.Deserialize``1(System.String)">
            <summary>
            Deserializes the value.
            </summary>
        </member>
        <member name="M:Template10.Services.SettingsService.SettingsService.Create(Template10.Services.SettingsService.SettingsStrategies,System.String,System.Boolean)">
            <summary>
            Creates an <c>ISettingsService</c> object targeting the requested (optional) <paramref name="folderName"/>
            in the <paramref name="strategy"/> container.
            </summary>
            <param name="strategy">Roaming or Local</param>
            <param name="folderName">Name of the settings folder to use</param>
            <param name="createFolderIfNotExists"><c>true</c> to create the folder if it isn't already there, false otherwise.</param>
            <returns></returns>
        </member>
        <member name="M:Template10.Services.KeyboardService.KeyboardHelper.CoreWindow_PointerPressed(Windows.UI.Core.CoreWindow,Windows.UI.Core.PointerEventArgs)">
            <summary>
            Invoked on every mouse click, touch screen tap, or equivalent interaction when this
            page is active and occupies the entire window.  Used to detect browser-style next and
            previous mouse button clicks to navigate between pages.
            </summary>
            <param name="sender">Instance that triggered the event.</param>
            <param name="e">Event data describing the conditions that led to the event.</param>
        </member>
        <member name="M:Template10.Template10__Library__XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:Template10.Template10__Library__XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:Template10.Template10__Library__XamlTypeInfo.XamlMetaDataProvider.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
    </members>
</doc>
